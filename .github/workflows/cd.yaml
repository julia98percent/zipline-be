name: ECR Build & Kubernetes Deploy

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: Docker build and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker build & Push Docker image to Amazon ECR
        uses: docker/build-push-action@v5
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ github.sha }}
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{env.ECR}}/zipline-j:latest
            ${{env.ECR}}/zipline-j:${{env.TAG}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save ECR registry info
        run: echo "${{ steps.login-ecr.outputs.registry }}" > ecr-registry.txt

      - name: Upload ECR registry info
        uses: actions/upload-artifact@v4
        with:
          name: ecr-info
          path: ecr-registry.txt
          retention-days: 1

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download ECR registry info
        uses: actions/download-artifact@v4
        with:
          name: ecr-info

      - name: Set ECR registry variable
        run: |
          ECR=$(cat ecr-registry.txt)
          echo "ECR=$ECR" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig for K3s
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K3S_KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          echo "Verifying kubeconfig..."
          kubectl config view --minify
          
          echo "Testing cluster connection..."
          kubectl cluster-info
          kubectl get nodes


      - name: Apply Kubernetes Secrets
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_URL: ${{  secrets.REDIS_URL  }}
          NR_ACCOUNT_ID: ${{  secrets.NR_ACCOUNT_ID  }}
          NR_API_KEY: ${{  secrets.NR_API_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACC_EXPIRATION: ${{ secrets.JWT_ACC_EXPIRATION }}
          JWT_REF_EXPIRATION: ${{ secrets.JWT_REF_EXPIRATION }}
          AWS_ACC_KEY: ${{ secrets.AWS_ACC_KEY }}
          AWS_SEC_KEY: ${{ secrets.AWS_SEC_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CORS_ALLOWED_ORIGINS_DEV: ${{ secrets.CORS_ALLOWED_ORIGINS_DEV }}
          SMS_API_KEY: ${{ secrets.SMS_API_KEY }}
          SMS_SEC_KEY: ${{ secrets.SMS_SEC_KEY }}
          SMS_AUTH_METHOD: ${{ secrets.SMS_AUTH_METHOD }}
          SMS_FROM_NUMBER: ${{ secrets.SMS_FROM_NUMBER }}
          KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
        run: |
          envsubst < kubernetes/app/spring-boot-secret.yaml | kubectl apply -f -


      - name: Apply Kubernetes Deployment
        env:
          ECR: ${{ env.ECR }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          envsubst < kubernetes/app/spring-boot-deployment.yaml | kubectl apply -f -