name: Java CI/CD Pipeline
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew test

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Build API Server
      - name: Build API Server
        run: ./gradlew apiserver:clean apiserver:build -x test
      
      # Build Crawler Server
      - name: Build Crawler Server
        run: ./gradlew crawlerserver:clean crawlerserver:build -x test
      
      # Login to DockerHub
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      # Build and Push API Server Docker Image
      - name: Docker Image Build - API Server
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/apiserver -f apiserver/Dockerfile ./apiserver
      - name: DockerHub Push - API Server
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/apiserver
      
      # Build and Push Crawler Server Docker Image  
      - name: Docker Image Build - Crawler Server
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/crawlerserver -f crawlerserver/Dockerfile ./crawlerserver
      - name: DockerHub Push - Crawler Server
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/crawlerserver
      
      # Deploy to EC2
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo yum update -y
            
            # Stop and remove existing containers
            sudo docker kill apiserver crawlerserver || true
            sudo docker rm -f apiserver crawlerserver || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/apiserver ${{ secrets.DOCKERHUB_USERNAME }}/crawlerserver || true
            
            # Pull new images
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/apiserver
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/crawlerserver
            
            # Create environment file for API Server
            cat << 'EOF' > /tmp/apiserver-env-vars
            PORT=${{ secrets.API_PORT }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            AWS_ACC_KEY=${{ secrets.AWS_ACC_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_SEC_KEY=${{ secrets.AWS_SEC_KEY }}
            AWS_STACK_VAL=${{ secrets.AWS_STACK_VAL }}
            FILE_ALLOWED_MEME_TYPES=${{ secrets.FILE_ALLOWED_MEME_TYPES }}
            JWT_ACC_EXPIRATION=${{ secrets.JWT_ACC_EXPIRATION }}
            JWT_REF_EXPIRATION=${{ secrets.JWT_REF_EXPIRATION }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            SMS_API_KEY=${{ secrets.SMS_API_KEY }}
            SMS_AUTH_KEY=${{ secrets.SMS_AUTH_KEY }}
            SMS_SEC_KEY=${{ secrets.SMS_SEC_KEY }}
            SURVEY_DELIMITER=${{ secrets.SURVEY_DELIMITER }}
            SPRING_PROFILES_ACTIVE=dev
            EOF
            
            # Create environment file for Crawler Server
            cat << 'EOF' > /tmp/crawlerserver-env-vars
            PORT=${{ secrets.CRAWLER_PORT }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MAX_USAGE_COUNT=${{ secrets.MAX_USAGE_COUNT }}
            MIN_ROATION_INTERVAL=${{ secrets.MIN_ROATION_INTERVAL }}
            PROXY_CLEANUP_INTERVAL=${{ secrets.PROXY_CLEANUP_INTERVAL }}
            PROXY_CONNECTION_TIMEOUT=${{ secrets.PROXY_CONNECTION_TIMEOUT }}
            PROXY_MAX_CONNECTION_PER_PROXY=${{ secrets.PROXY_MAX_CONNECTION_PER_PROXY }}
            PROXY_MAX_FAILURES=${{ secrets.PROXY_MAX_FAILURES }}
            PROXY_READ_TIMEOUT=${{ secrets.PROXY_READ_TIMEOUT }}
            PROXY_RETRY_COUNT=${{ secrets.PROXY_RETRY_COUNT }}
            PROXY_RETRY_DELAY=${{ secrets.PROXY_RETRY_DELAY }}
            PROXY_VALIDATION_TIMEOUT=${{ secrets.PROXY_VALIDATION_TIMEOUT }}
            PROXY_VALIDATION_URL=${{ secrets.PROXY_VALIDATION_URL }}
            SPRING_PROFILES_ACTIVE=dev
            EOF
            
            # Run API Server
            sudo docker run -d -p ${{ secrets.API_PORT }}:${{ secrets.API_PORT }} \
            --name apiserver \
            --env-file /tmp/apiserver-env-vars \
            ${{ secrets.DOCKERHUB_USERNAME }}/apiserver
            
            # Run Crawler Server  
            sudo docker run -d -p ${{ secrets.CRAWLER_PORT }}:${{ secrets.CRAWLER_PORT }} \
            --name crawlerserver \
            --env-file /tmp/crawlerserver-env-vars \
            ${{ secrets.DOCKERHUB_USERNAME }}/crawlerserver
            
            # Clean up environment files
            rm /tmp/apiserver-env-vars /tmp/crawlerserver-env-vars
